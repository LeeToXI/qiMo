%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.14.6 (Build 18G2022) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 24 24
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 24 24
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0.80000001 0.80000001 0.80000001 sc
q
7.5 7.0500002 m
4.3800001 7.0500002 l
4.1461167 7.0574002 3.9383831 6.9015999 3.8799999 6.6750002 c
3.085 3.6299999 l
3.0436571 3.476835 3.0774555 3.3131385 3.1760793 3.1888726 c
3.2747033 3.0646064 3.4264481 2.9945183 3.585 3 c
8.3400002 3 l
8.4985514 2.9945183 8.6502972 3.0646064 8.7489204 3.1888726 c
8.8475447 3.3131385 8.8813429 3.476835 8.8400002 3.6299999 c
8 6.6750002 l
7.941617 6.9015999 7.7338834 7.0574002 7.5 7.0500002 c
h
W
0 0 24 24 rc
-1.9322814 12.050253 m
13.857282 12.050253 l
13.857282 -2.0002992 l
-1.9322814 -2.0002992 l
h
f
Q
0 0 0 sc
q
8.3199997 2.7499905 m
3.5650001 2.7499905 l
3.3312008 2.748817 3.1105943 2.8581934 2.97 3.0450001 c
2.828784 3.2300422 2.7808168 3.469878 2.8399999 3.6949999 c
3.655 6.7399998 l
3.7413456 7.0697198 4.0391617 7.299757 4.3800001 7.3000002 c
7.5 7.3000002 l
7.8402433 7.2980232 8.1371269 7.0687065 8.2250004 6.7399998 c
9.0349998 3.6949999 l
9.0957022 3.4695613 9.0479574 3.2287121 8.9058466 3.0434775 c
8.7637358 2.8582432 8.5434675 2.749753 8.3100004 2.7499905 c
8.3199997 2.7499905 l
h
4.3800001 6.8000002 m
4.2656279 6.8016429 4.1647282 6.7254534 4.1349998 6.6149998 c
3.325 3.5650001 l
3.3068836 3.4903245 3.3234072 3.4114614 3.3699765 3.3503392 c
3.4165459 3.289217 3.4881945 3.2523539 3.5650001 3.2499871 c
8.3199997 3.2499871 l
8.3988781 3.249193 8.4733191 3.2864137 8.5200005 3.3499999 c
8.568841 3.4101942 8.5856009 3.4902716 8.5649996 3.5650001 c
7.75 6.6149998 l
7.7182689 6.7262292 7.6156464 6.8021698 7.5 6.8000002 c
4.3800001 6.8000002 l
h
W
0 0 24 24 rc
-2.1848178 12.3 m
14.060801 12.3 l
14.060801 -2.2500188 l
-2.1848178 -2.2500188 l
h
f
Q
0.80000001 0.80000001 0.80000001 sc
q
13.5 7.0500002 m
10.35 7.0500002 l
10.116117 7.0574002 9.9083834 6.9015999 9.8500004 6.6750002 c
9.04 3.6299999 l
8.9986572 3.476835 9.0324554 3.3131385 9.1310797 3.1888726 c
9.2297029 3.0646064 9.3814478 2.9945183 9.54 3 c
14.3 3 l
14.458551 2.9945183 14.610297 3.0646064 14.70892 3.1888726 c
14.807545 3.3131385 14.841343 3.476835 14.8 3.6299999 c
13.99 6.6750002 l
13.932466 6.8978939 13.730184 7.0527015 13.5 7.0500002 c
h
W
0 0 24 24 rc
4.0227189 12.050253 m
19.817282 12.050253 l
19.817282 -2.0002992 l
4.0227189 -2.0002992 l
h
f
Q
0 0 0 sc
q
14.295 2.7499728 m
9.5349998 2.7499728 l
9.3023968 2.7479904 9.0829544 2.8577116 8.9449997 3.0450001 c
8.7998838 3.2281928 8.7498341 3.4691715 8.8100004 3.6949999 c
9.625 6.7399998 l
9.7128735 7.0687065 10.009756 7.2980232 10.35 7.3000002 c
13.5 7.3000002 l
13.840838 7.299757 14.138655 7.0697198 14.225 6.7399998 c
15 3.6949999 l
15.060165 3.4691715 15.010117 3.2281928 14.865 3.0450001 c
14.731243 2.863342 14.520548 2.7542982 14.295 2.7499728 c
h
10.35 6.8000002 m
10.237484 6.7993684 10.139253 6.723649 10.11 6.6149998 c
9.2950001 3.5650001 l
9.2768831 3.4903245 9.2934074 3.4114614 9.3399763 3.3503392 c
9.3865461 3.289217 9.4581947 3.2523539 9.5349998 3.25 c
14.295 3.25 l
14.371805 3.2523539 14.443454 3.289217 14.490024 3.3503392 c
14.536592 3.4114614 14.553117 3.4903245 14.535 3.5650001 c
13.72 6.6149998 l
13.695788 6.7186189 13.606236 6.7939234 13.5 6.8000002 c
10.35 6.8000002 l
h
W
0 0 24 24 rc
3.7850499 12.3 m
20.02495 12.3 l
20.02495 -2.2500536 l
3.7850499 -2.2500536 l
h
f
Q
0.80000001 0.80000001 0.80000001 sc
q
19.5 7.0500002 m
16.35 7.0500002 l
16.116117 7.0574002 15.908383 6.9015999 15.85 6.6750002 c
15.04 3.6299999 l
14.998657 3.476835 15.032455 3.3131385 15.13108 3.1888726 c
15.229703 3.0646064 15.381448 2.9945183 15.54 3 c
20.299999 3 l
20.458551 2.9945183 20.610296 3.0646064 20.708921 3.1888726 c
20.807545 3.3131385 20.841343 3.476835 20.799999 3.6299999 c
19.99 6.6750002 l
19.932467 6.8978939 19.730185 7.0527015 19.5 7.0500002 c
h
W
0 0 24 24 rc
10.022718 12.050253 m
25.817282 12.050253 l
25.817282 -2.0002992 l
10.022718 -2.0002992 l
h
f
Q
0 0 0 sc
q
20.295 2.7499728 m
15.535 2.7499728 l
15.302397 2.7479904 15.082954 2.8577116 14.945 3.0450001 c
14.799884 3.2281928 14.749834 3.4691715 14.81 3.6949999 c
15.625 6.7399998 l
15.712873 7.0687065 16.009756 7.2980232 16.35 7.3000002 c
19.5 7.3000002 l
19.840839 7.299757 20.138655 7.0697198 20.225 6.7399998 c
21 3.6949999 l
21.060165 3.4691715 21.010117 3.2281928 20.865 3.0450001 c
20.731243 2.863342 20.520548 2.7542982 20.295 2.7499728 c
h
16.35 6.8000002 m
16.237484 6.7993684 16.139254 6.723649 16.110001 6.6149998 c
15.295 3.5650001 l
15.276883 3.4903245 15.293407 3.4114614 15.339976 3.3503392 c
15.386546 3.289217 15.458195 3.2523539 15.535 3.25 c
20.295 3.25 l
20.371805 3.2523539 20.443455 3.289217 20.490023 3.3503392 c
20.536592 3.4114614 20.553116 3.4903245 20.535 3.5650001 c
19.719999 6.6149998 l
19.695787 6.7186189 19.606237 6.7939234 19.5 6.8000002 c
16.35 6.8000002 l
h
W
0 0 24 24 rc
9.7850494 12.3 m
26.02495 12.3 l
26.02495 -2.2500536 l
9.7850494 -2.2500536 l
h
f
Q
0.80000001 0.80000001 0.80000001 sc
q
10.535 11.095 m
7.4050002 11.095 l
7.1725655 11.102962 6.965332 10.949609 6.9050002 10.725 c
6.0900002 7.6750002 l
6.0505466 7.5225286 6.0852375 7.3603797 6.1836228 7.2373981 c
6.2820082 7.1144166 6.4325867 7.0449781 6.5900002 7.0500002 c
11.35 7.0500002 l
11.507413 7.0449781 11.657992 7.1144166 11.756377 7.2373981 c
11.854762 7.3603797 11.889453 7.5225286 11.85 7.6750002 c
11 10.725 l
10.943053 10.937054 10.754427 11.087144 10.535 11.095 c
h
W
0 0 24 24 rc
1.0740521 16.095297 m
16.865948 16.095297 l
16.865948 2.0497451 l
1.0740521 2.0497451 l
h
f
Q
0 0 0 sc
q
11.35 6.7999759 m
6.5949998 6.7999759 l
6.3619423 6.7981296 6.141439 6.9054332 5.9990993 7.0899835 c
5.85676 7.2745342 5.808989 7.5150623 5.8699999 7.7399998 c
6.6799998 10.79 l
6.769753 11.116724 7.0661755 11.34364 7.4050002 11.345015 c
10.535 11.345015 l
10.874999 11.347114 11.173294 11.118764 11.26 10.79 c
12.075 7.7399998 l
12.136011 7.5150623 12.08824 7.2745342 11.945901 7.0899835 c
11.803561 6.9054332 11.583057 6.7981296 11.35 6.7999759 c
11.35 6.7999759 l
h
7.4050002 10.845026 m
7.2924838 10.844368 7.194253 10.768649 7.165 10.66 c
6.355 7.6149998 l
6.3352261 7.5393567 6.3498654 7.4588418 6.395 7.395 c
6.4437237 7.3345323 6.5173459 7.2995615 6.5949998 7.2999959 c
11.35 7.2999959 l
11.427654 7.2995615 11.501276 7.3345323 11.55 7.395 c
11.595135 7.4588418 11.609774 7.5393567 11.59 7.6149998 c
10.78 10.66 l
10.750272 10.770453 10.649372 10.846642 10.535 10.845026 c
7.4050002 10.845026 l
h
W
0 0 24 24 rc
0.84401375 16.34503 m
17.100986 16.34503 l
17.100986 1.7999525 l
0.84401375 1.7999525 l
h
f
Q
0.80000001 0.80000001 0.80000001 sc
q
16.535 11.095 m
13.405 11.095 l
13.172565 11.102962 12.965332 10.949609 12.905 10.725 c
12.09 7.6750002 l
12.050547 7.5225286 12.085238 7.3603797 12.183622 7.2373981 c
12.282008 7.1144166 12.432587 7.0449781 12.59 7.0500002 c
17.35 7.0500002 l
17.507414 7.0449781 17.657991 7.1144166 17.756378 7.2373981 c
17.854763 7.3603797 17.889454 7.5225286 17.85 7.6750002 c
17 10.725 l
16.943052 10.937054 16.754427 11.087144 16.535 11.095 c
h
W
0 0 24 24 rc
7.0740523 16.095297 m
22.865948 16.095297 l
22.865948 2.0497451 l
7.0740523 2.0497451 l
h
f
Q
0 0 0 sc
q
17.35 6.7999759 m
12.595 6.7999759 l
12.361942 6.7981296 12.141438 6.9054332 11.9991 7.0899835 c
11.85676 7.2745342 11.808989 7.5150623 11.87 7.7399998 c
12.68 10.79 l
12.769753 11.116724 13.066175 11.34364 13.405 11.345015 c
16.535 11.345015 l
16.875 11.347114 17.173294 11.118764 17.26 10.79 c
18.075001 7.7399998 l
18.136011 7.5150623 18.08824 7.2745342 17.9459 7.0899835 c
17.80356 6.9054332 17.583057 6.7981296 17.35 6.7999759 c
h
13.405 10.845026 m
13.292483 10.844368 13.194253 10.768649 13.165 10.66 c
12.355 7.6149998 l
12.335226 7.5393567 12.349865 7.4588418 12.395 7.395 c
12.443724 7.3345323 12.517345 7.2995615 12.595 7.2999959 c
17.35 7.2999959 l
17.427654 7.2995615 17.501276 7.3345323 17.549999 7.395 c
17.595135 7.4588418 17.609774 7.5393567 17.59 7.6149998 c
16.780001 10.66 l
16.750273 10.770453 16.649372 10.846642 16.535 10.845026 c
13.405 10.845026 l
h
W
0 0 24 24 rc
6.8440137 16.34503 m
23.100986 16.34503 l
23.100986 1.7999525 l
6.8440137 1.7999525 l
h
f
Q
0.80000001 0.80000001 0.80000001 sc
q
13.5 15.145 m
10.35 15.145 l
10.117565 15.152962 9.9103317 14.999609 9.8500004 14.775 c
9.04 11.725 l
8.9986572 11.571835 9.0324554 11.408138 9.1310797 11.283873 c
9.2297029 11.159606 9.3814478 11.089519 9.54 11.095 c
14.3 11.095 l
14.458551 11.089519 14.610297 11.159606 14.70892 11.283873 c
14.807545 11.408138 14.841343 11.571835 14.8 11.725 c
13.99 14.775 l
13.930544 14.995907 13.728745 15.148286 13.5 15.145 c
h
W
0 0 24 24 rc
4.0227189 20.145296 m
19.817282 20.145296 l
19.817282 6.0947008 l
4.0227189 6.0947008 l
h
f
Q
0 0 0 sc
q
14.295 10.845 m
9.5349998 10.845 l
9.3029852 10.8487 9.0853729 10.95819 8.944129 11.142295 c
8.8028841 11.326399 8.7534857 11.564943 8.8100004 11.79 c
9.625 14.84 l
9.7147532 15.166723 10.011175 15.393641 10.35 15.395 c
13.5 15.395 l
13.838824 15.393641 14.135247 15.166723 14.225 14.84 c
15 11.79 l
15.056514 11.564943 15.007115 11.326399 14.865871 11.142295 c
14.724627 10.95819 14.507014 10.8487 14.275 10.845 c
14.295 10.845 l
h
10.35 14.895 m
10.236884 14.896134 10.137697 14.819678 10.11 14.71 c
9.2950001 11.66 l
9.2743988 11.585272 9.2911596 11.505195 9.3400002 11.445 c
9.3861485 11.383436 9.4580746 11.346551 9.5349998 11.345 c
14.295 11.345 l
14.371925 11.346551 14.443851 11.383436 14.49 11.445 c
14.53884 11.505195 14.555601 11.585272 14.535 11.66 c
13.72 14.71 l
13.693966 14.82076 13.593739 14.898019 13.48 14.895 c
10.35 14.895 l
h
W
0 0 24 24 rc
3.7871091 20.395 m
20.02289 20.395 l
20.02289 5.8449998 l
3.7871091 5.8449998 l
h
f
Q
q
11.915 17.499998 m
11.776929 17.499998 11.665 17.611929 11.665 17.75 c
11.665 20.605 l
11.665 20.743071 11.776929 20.855 11.915 20.855 c
12.053071 20.855 12.165 20.743071 12.165 20.605 c
12.165 17.77 l
12.170594 17.700304 12.146746 17.631451 12.099241 17.580147 c
12.051738 17.528843 11.98492 17.499777 11.915 17.499998 c
h
W
0 0 24 24 rc
6.665 25.855 m
17.165802 25.855 l
17.165802 12.499997 l
6.665 12.499997 l
h
f
Q
q
16.834999 15.435 m
16.768421 15.435342 16.704317 15.460272 16.655001 15.505 c
16.559109 15.603907 16.559109 15.761093 16.655001 15.86 c
18.655001 17.860001 l
18.752211 17.955286 18.907789 17.955286 19.004999 17.860001 c
19.05324 17.812204 19.07996 17.74684 19.079041 17.678938 c
19.078074 17.611034 19.049549 17.546438 19 17.5 c
17 15.5 l
16.953888 15.460374 16.89575 15.43747 16.834999 15.435 c
h
W
0 0 24 24 rc
11.583081 22.931465 m
24.079063 22.931465 l
24.079063 10.435 l
11.583081 10.435 l
h
f
Q
q
6.8649998 15.435 m
6.8001518 15.436554 6.7380309 15.461403 6.6900001 15.505 c
4.6900001 17.504999 l
4.6426716 17.551941 4.6160502 17.615841 4.6160502 17.682501 c
4.6160502 17.749159 4.6426716 17.813059 4.6900001 17.860001 c
4.7872109 17.955286 4.9427891 17.955286 5.04 17.860001 c
7.04 15.86 l
7.1358914 15.761093 7.1358914 15.603907 7.04 15.505 c
6.9919691 15.461403 6.9298482 15.436554 6.8649998 15.435 c
h
W
0 0 24 24 rc
-0.38394961 22.931465 m
12.111918 22.931465 l
12.111918 10.435 l
-0.38394961 10.435 l
h
f
ep
end
%%Trailer
%%EOF
