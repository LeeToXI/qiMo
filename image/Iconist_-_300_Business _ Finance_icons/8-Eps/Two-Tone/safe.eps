%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.14.6 (Build 18G2022) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 24 24
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 24 24
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0.80000001 0.80000001 0.80000001 sc
q
5.6999998 21.195 m
18.084999 21.195 l
19.741854 21.195 21.084999 19.851854 21.084999 18.195 c
21.084999 5.8099999 l
21.084999 4.1531458 19.741854 2.8099999 18.084999 2.8099999 c
5.6999998 2.8099999 l
4.0431457 2.8099999 2.7 4.1531458 2.7 5.8099999 c
2.7 18.195 l
2.7 19.851854 4.0431457 21.195 5.6999998 21.195 c
h
W
0 0 24 24 rc
-2.3 26.195 m
26.084999 26.195 l
26.084999 -2.1900001 l
-2.3 -2.1900001 l
h
f
Q
0 0 0 sc
q
18.584999 2.5550001 m
5.1999998 2.5550001 l
3.681217 2.5550001 2.45 3.786217 2.45 5.3049998 c
2.45 18.695 l
2.45 20.213783 3.681217 21.445 5.1999998 21.445 c
18.584999 21.445 l
20.102642 21.442247 21.332249 20.212643 21.335001 18.695 c
21.335001 5.3049998 l
21.332249 3.7873583 20.102642 2.5577519 18.584999 2.5550001 c
h
5.1999998 20.945 m
3.9573593 20.945 2.95 19.937641 2.95 18.695 c
2.95 5.3049998 l
2.95 4.0623593 3.9573593 3.0550001 5.1999998 3.0550001 c
18.584999 3.0550001 l
19.8265 3.0577497 20.832251 4.0634999 20.834999 5.3049998 c
20.834999 18.695 l
20.832251 19.936501 19.8265 20.942251 18.584999 20.945 c
5.1999998 20.945 l
h
W
0 0 24 24 rc
-2.55 26.445 m
26.335001 26.445 l
26.335001 -2.4449999 l
-2.55 -2.4449999 l
h
f
Q
q
17 4.3299999 m
6.7800002 4.3299999 l
5.3681011 4.3299999 4.2227578 5.473104 4.2199998 6.8849998 c
4.2199998 7.2800002 l
4.2226601 7.416954 4.333046 7.5273399 4.4699998 7.5300002 c
4.6080713 7.5300002 4.7199998 7.4180713 4.7199998 7.2800002 c
4.7199998 6.8849998 l
4.7227569 5.7492466 5.6442432 4.8299966 6.7800002 4.8299999 c
17 4.8299999 l
18.133804 4.8327484 19.052252 5.7511954 19.055 6.8849998 c
19.055 17.115 l
19.052252 18.248804 18.133804 19.167252 17 19.17 c
6.7800002 19.17 l
5.6442432 19.17 4.7227569 18.250753 4.7199998 17.115 c
4.7199998 16.976929 4.6080713 16.865 4.4699998 16.865 c
4.3319287 16.865 4.2199998 16.976929 4.2199998 17.115 c
4.2227578 18.526896 5.3681011 19.67 6.7800002 19.67 c
17 19.67 l
18.411087 19.67 19.555 18.526087 19.555 17.115 c
19.555 6.8849998 l
19.555 6.2073717 19.285812 5.5574975 18.806658 5.078342 c
18.327503 4.5991869 17.677628 4.3299999 17 4.3299999 c
h
W
0 0 24 24 rc
-0.78000003 24.67 m
24.555 24.67 l
24.555 -0.67000002 l
-0.78000003 -0.67000002 l
h
f
Q
q
4.4699998 10.235 m
4.333046 10.23766 4.2226601 10.348045 4.2199998 10.485 c
4.2199998 13.84 l
4.2226601 13.976954 4.333046 14.08734 4.4699998 14.09 c
4.6080713 14.09 4.7199998 13.978071 4.7199998 13.84 c
4.7199998 10.5 l
4.7241392 10.431137 4.6996388 10.363626 4.6522989 10.313444 c
4.6049585 10.263264 4.5389867 10.234876 4.4699998 10.235 c
h
W
0 0 24 24 rc
-0.78000003 19.09 m
9.7204514 19.09 l
9.7204514 5.2349992 l
-0.78000003 5.2349992 l
h
f
Q
1 1 1 sc
q
4.4724998 17.045 m
4.8632412 17.045 5.1799998 16.728241 5.1799998 16.3375 c
5.1799998 14.5425 l
5.1799998 14.151758 4.8632412 13.835 4.4724998 13.835 c
4.0817585 13.835 3.7649999 14.151758 3.7649999 14.5425 c
3.7649999 16.3375 l
3.7649999 16.728241 4.0817585 17.045 4.4724998 17.045 c
h
W
0 0 24 24 rc
-1.235 22.045 m
10.18 22.045 l
10.18 8.835 l
-1.235 8.835 l
h
f
Q
0 0 0 sc
q
4.4699998 13.59 m
4.2145286 13.587336 3.9685323 13.686614 3.7864747 13.865856 c
3.6044168 14.045099 3.5013168 14.289517 3.5 14.545 c
3.5 16.34 l
3.5363009 16.842018 3.9541709 17.230762 4.4575 17.230762 c
4.9608293 17.230762 5.3786988 16.842018 5.415 16.34 c
5.415 14.545 l
5.4123425 14.022557 4.9923859 13.598157 4.4699998 13.59 c
4.4699998 13.59 l
h
4.4699998 16.795 m
4.2187104 16.795 4.0149999 16.59129 4.0149999 16.34 c
4.0149999 14.545 l
4.0395203 14.31077 4.2369905 14.132894 4.4724998 14.132894 c
4.7080097 14.132894 4.9054799 14.31077 4.9299998 14.545 c
4.9299998 16.34 l
4.9272594 16.592096 4.7221112 16.795 4.4699998 16.795 c
4.4699998 16.795 l
h
W
0 0 24 24 rc
-1.5 22.230762 m
10.415 22.230762 l
10.415 8.5899477 l
-1.5 8.5899477 l
h
f
Q
1 1 1 sc
q
4.4724998 10.485 m
4.8632412 10.485 5.1799998 10.168242 5.1799998 9.7775002 c
5.1799998 7.9825001 l
5.1799998 7.5917587 4.8632412 7.2750001 4.4724998 7.2750001 c
4.0817585 7.2750001 3.7649999 7.5917587 3.7649999 7.9825001 c
3.7649999 9.7775002 l
3.7649999 10.168242 4.0817585 10.485 4.4724998 10.485 c
h
W
0 0 24 24 rc
-1.235 15.485 m
10.18 15.485 l
10.18 2.2750001 l
-1.235 2.2750001 l
h
f
Q
0 0 0 sc
q
4.4699998 7.0300002 m
4.2119207 7.0272975 3.9636242 7.1286254 3.7811248 7.3111248 c
3.5986254 7.4936242 3.4972973 7.7419209 3.5 8 c
3.5 9.7799997 l
3.5363009 10.282019 3.9541709 10.670763 4.4575 10.670763 c
4.9608293 10.670763 5.3786988 10.282019 5.415 9.7799997 c
5.415 8 l
5.420567 7.4717216 4.9982438 7.0382257 4.4699998 7.0300002 c
h
4.4699998 10.235 m
4.2187104 10.235 4.0149999 10.031289 4.0149999 9.7799997 c
4.0149999 8 l
4.0395203 7.7657704 4.2369905 7.587893 4.4724998 7.587893 c
4.7080097 7.587893 4.9054799 7.7657704 4.9299998 8 c
4.9299998 9.7799997 l
4.9272594 10.032096 4.7221112 10.235 4.4699998 10.235 c
4.4699998 10.235 l
h
W
0 0 24 24 rc
-1.5000527 15.670763 m
10.415054 15.670763 l
10.415054 2.0299473 l
-1.5000527 2.0299473 l
h
f
Q
1 1 1 sc
q
11.89 10.24 m
12.862021 10.24 13.65 11.027979 13.65 12 c
13.65 12.972021 12.862021 13.76 11.89 13.76 c
10.917979 13.76 10.13 12.972021 10.13 12 c
10.13 11.027979 10.917979 10.24 11.89 10.24 c
h
W
0 0 24 24 rc
5.1300001 18.76 m
18.65 18.76 l
18.65 5.2399998 l
5.1300001 5.2399998 l
h
f
Q
0 0 0 sc
q
11.89 10 m
10.785431 10 9.8900003 10.895431 9.8900003 12 c
9.8900003 13.104569 10.785431 14 11.89 14 c
12.99457 14 13.89 13.104569 13.89 12 c
13.89 10.895431 12.99457 10 11.89 10 c
h
11.89 13.5 m
11.283307 13.5 10.736352 13.134537 10.504181 12.574025 c
10.272009 12.013514 10.400343 11.368337 10.82934 10.93934 c
11.258337 10.510343 11.903514 10.38201 12.464025 10.614181 c
13.024537 10.846353 13.39 11.393307 13.39 12 c
13.39 12.828427 12.718427 13.5 11.89 13.5 c
h
W
0 0 24 24 rc
4.8899999 19 m
18.889999 19 l
18.889999 5 l
4.8899999 5 l
h
f
Q
1 1 1 sc
q
12.46 13.66 m
12.89 15.955 l
12.89 16.507284 12.442285 16.955 11.89 16.955 c
11.337715 16.955 10.89 16.507284 10.89 15.955 c
11.325 13.66 l
11.506618 13.723927 11.697473 13.757708 11.89 13.76 c
12.084158 13.757715 12.276659 13.723944 12.46 13.66 c
h
W
0 0 24 24 rc
5.8899999 21.955 m
17.889999 21.955 l
17.889999 8.6599998 l
5.8899999 8.6599998 l
h
f
Q
0 0 0 sc
q
12.46 13.41 m
12.433547 13.405221 12.406452 13.405221 12.38 13.41 c
12.057693 13.531254 11.702307 13.531254 11.38 13.41 c
11.315445 13.377863 11.239555 13.377863 11.175 13.41 c
11.109625 13.443655 11.064819 13.50713 11.055 13.58 c
10.62 15.87 l
10.550143 16.241152 10.649097 16.62414 10.89 16.915001 c
11.13855 17.193583 11.494157 17.35288 11.8675 17.35288 c
12.240844 17.35288 12.59645 17.193583 12.845 16.915001 c
13.085902 16.62414 13.184856 16.241152 13.115 15.87 c
12.68 13.58 l
12.667923 13.508038 12.623763 13.445478 12.56 13.41 c
12.527089 13.402499 12.492911 13.402499 12.46 13.41 c
12.46 13.41 l
h
11.89 14 m
12.016142 14.001543 12.142022 13.988116 12.265 13.96 c
12.645 16 l
12.693564 16.221119 12.640343 16.45236 12.5 16.629999 c
12.350032 16.800047 12.134231 16.897465 11.9075 16.897465 c
11.68077 16.897465 11.464968 16.800047 11.315 16.629999 c
11.164815 16.456936 11.098914 16.226284 11.135 16 c
11.5 13.97 l
11.628256 13.996116 11.759259 14.006192 11.89 14 c
11.89 14 l
h
W
0 0 24 24 rc
5.5980754 22.35288 m
18.136925 22.35288 l
18.136925 8.3858976 l
5.5980754 8.3858976 l
h
f
Q
1 1 1 sc
q
11.34 10.335 m
10.89 7.9499998 l
10.89 7.3977151 11.337715 6.9499998 11.89 6.9499998 c
12.442285 6.9499998 12.89 7.3977151 12.89 7.9499998 c
12.445 10.335 l
12.087544 10.208405 11.697455 10.208405 11.34 10.335 c
11.34 10.335 l
h
W
0 0 24 24 rc
5.8899999 15.335 m
17.889999 15.335 l
17.889999 1.9499999 l
5.8899999 1.9499999 l
h
f
Q
0 0 0 sc
q
11.89 6.5 m
11.503619 6.4911771 11.134723 6.6608696 10.89 6.96 c
10.659385 7.2537775 10.569772 7.6341729 10.645 8 c
11.095 10.38 l
11.107077 10.451962 11.151237 10.514522 11.215 10.55 c
11.280049 10.579963 11.354951 10.579963 11.42 10.55 c
11.724464 10.434782 12.060535 10.434782 12.365 10.55 c
12.430567 10.577501 12.504434 10.577501 12.57 10.55 c
12.632803 10.513464 12.676604 10.451412 12.69 10.38 c
13.14 8 l
13.209856 7.6288481 13.110903 7.2458601 12.87 6.9549999 c
12.626492 6.6661363 12.267808 6.4996047 11.89 6.5 c
h
11.535 10 m
11.135 7.8800001 l
11.094816 7.6559591 11.155154 7.4255805 11.3 7.25 c
11.449968 7.0799522 11.66577 6.9825358 11.8925 6.9825358 c
12.11923 6.9825358 12.335032 7.0799522 12.485 7.25 c
12.630628 7.425117 12.689422 7.6566162 12.645 7.8800001 c
12.245 10 l
12.010971 9.9500275 11.769029 9.9500275 11.535 10 c
11.535 10 l
h
W
0 0 24 24 rc
5.6189609 15.572472 m
18.161924 15.572472 l
18.161924 1.4996722 l
5.6189609 1.4996722 l
h
f
Q
1 1 1 sc
q
10.215 12.5 m
7.8899999 12.94 l
7.3377151 12.94 6.8899999 12.492285 6.8899999 11.94 c
6.8899999 11.387715 7.3377151 10.94 7.8899999 10.94 c
10.245 11.385 l
10.169715 11.581337 10.130749 11.789725 10.13 12 c
10.134115 12.169889 10.162744 12.338294 10.215 12.5 c
h
W
0 0 24 24 rc
1.89 17.940001 m
15.245 17.940001 l
15.245 5.9400001 l
1.89 5.9400001 l
h
f
Q
0 0 0 sc
q
7.6999998 10.685 m
7.2010412 10.65629 6.7316337 10.922892 6.5007224 11.366134 c
6.2698107 11.809377 6.3203321 12.34684 6.6297984 12.739287 c
6.9392653 13.131734 7.4501319 13.30619 7.9349999 13.185 c
10.26 12.745 l
10.331026 12.734053 10.393409 12.691853 10.43 12.63 c
10.465713 12.567859 10.474731 12.493902 10.455 12.425 c
10.408196 12.282894 10.382916 12.134586 10.38 11.985 c
10.382669 11.813641 10.416557 11.644204 10.48 11.485 c
10.509526 11.418114 10.509526 11.341887 10.48 11.275 c
10.442065 11.213494 10.380658 11.170148 10.31 11.155 c
7.9549999 10.71 l
7.8711243 10.692665 7.785645 10.684285 7.6999998 10.685 c
7.6999998 10.685 l
h
7.6999998 12.72 m
7.3752923 12.722214 7.084094 12.52049 6.9720459 12.215718 c
6.8599977 11.910948 6.9511843 11.568641 7.1999998 11.36 c
7.3777409 11.215551 7.6094227 11.155351 7.835 11.195 c
9.915 11.59 l
9.8854733 11.724679 9.870388 11.862123 9.8699999 12 c
9.8703022 12.107354 9.8803434 12.21446 9.8999996 12.32 c
7.835 12.71 l
7.6999998 12.72 l
h
W
0 0 24 24 rc
1.3570354 18.222956 m
15.502145 18.222956 l
15.502145 5.6828928 l
1.3570354 5.6828928 l
h
f
Q
1 1 1 sc
q
15.89 12.955 m
13.565 12.5 l
13.621191 12.339126 13.651567 12.170371 13.655 12 c
13.65305 11.793089 13.614103 11.588196 13.54 11.395 c
15.89 10.95 l
16.442286 10.95 16.889999 11.397716 16.889999 11.95 c
16.889999 12.502285 16.442286 12.95 15.89 12.95 c
15.89 12.955 l
h
W
0 0 24 24 rc
8.54 17.955 m
21.889999 17.955 l
21.889999 5.9499998 l
8.54 5.9499998 l
h
f
Q
0 0 0 sc
q
16.08 10.685 m
16.001833 10.677794 15.923167 10.677794 15.845 10.685 c
13.5 11.15 l
13.427962 11.164978 13.364931 11.2082 13.325 11.27 c
13.295473 11.336886 13.295473 11.413114 13.325 11.48 c
13.386624 11.639738 13.420446 11.808847 13.425 11.98 c
13.422084 12.129586 13.396804 12.277894 13.35 12.42 c
13.327719 12.488679 13.336866 12.563689 13.375 12.625 c
13.409437 12.686624 13.470266 12.729019 13.54 12.74 c
15.865 13.18 l
16.349869 13.30119 16.860735 13.126734 17.170202 12.734287 c
17.479668 12.34184 17.53019 11.804377 17.299278 11.361134 c
17.068367 10.917892 16.598959 10.65129 16.1 10.68 c
16.08 10.685 l
h
13.855 11.59 m
15.94 11.195 l
16.164042 11.154817 16.394419 11.215154 16.57 11.36 c
16.748747 11.505599 16.851744 11.724464 16.850021 11.955 c
16.849358 12.183346 16.7474 12.399628 16.571663 12.545431 c
16.395926 12.691235 16.164539 12.751518 15.94 12.71 c
15.94 12.71 l
13.875 12.32 l
13.894656 12.21446 13.904697 12.107354 13.905 12 c
13.905363 11.861791 13.888568 11.724072 13.855 11.59 c
13.855 11.59 l
h
W
0 0 24 24 rc
8.3028545 18.217955 m
22.442965 18.217955 l
22.442965 5.6778927 l
8.3028545 5.6778927 l
h
f
ep
end
%%Trailer
%%EOF
