%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.14.6 (Build 18G2022) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 24 24
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 24 24
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0 0 0 sc
q
12.095 5.7849998 m
12.161016 5.7900391 12.222181 5.8215818 12.264567 5.8724442 c
12.306952 5.9233065 12.326948 5.9891577 12.32 6.0549998 c
12.304272 6.1920314 12.182432 6.291718 12.045 6.2800002 c
11.306526 6.206377 10.560911 6.25879 9.8400002 6.4349999 c
9.7763147 6.4515853 9.7086344 6.4418526 9.6522036 6.4079938 c
9.5957727 6.374135 9.555335 6.3189979 9.54 6.2550001 c
9.5233059 6.1906796 9.5329065 6.1223598 9.5666809 6.0651312 c
9.6004543 6.0079026 9.6556234 5.9664755 9.7200003 5.9499998 c
10.266293 5.8141909 10.82708 5.7453513 11.39 5.7449999 c
11.625546 5.7457242 11.860884 5.7590766 12.095 5.7849998 c
h
W
0 0 24 24 rc
4.5319815 11.442909 m
17.321354 11.442909 l
17.321354 0.745 l
4.5319815 0.745 l
h
f
Q
q
14.93 17.885 m
14.955 17.885 l
14.992555 17.861828 15.035873 17.849699 15.08 17.849989 c
15.164763 17.851046 15.243466 17.894144 15.29 17.965 c
15.36207 18.083044 15.329112 18.236851 15.215 18.315001 c
14.553854 18.75589 13.821372 19.078995 13.05 19.27 c
12.911929 19.303137 12.773137 19.218071 12.74 19.08 c
12.706862 18.941929 12.791929 18.818136 12.93 18.785 c
13.643786 18.603172 14.320529 18.298639 14.93 17.885 c
h
W
0 0 24 24 rc
7.732842 24.277159 m
20.328115 24.277159 l
20.328115 12.849984 l
7.732842 12.849984 l
h
f
Q
q
17.5 14.35 m
17.532658 14.241554 17.631758 14.166723 17.745001 14.165 c
17.809999 14.165 l
17.882423 14.179604 17.944954 14.224902 17.981403 14.289166 c
18.017853 14.353432 18.024637 14.430346 18 14.5 c
17.779739 15.269669 17.427876 15.995387 16.959999 16.645 c
16.877195 16.75462 16.722435 16.77894 16.610001 16.700001 c
16.555027 16.661846 16.518051 16.602865 16.507664 16.53676 c
16.497274 16.470654 16.514378 16.403177 16.555 16.35 c
16.98558 15.744337 17.305519 15.067219 17.5 14.35 c
h
W
0 0 24 24 rc
11.504692 21.746317 m
23.014595 21.746317 l
23.014595 9.165 l
11.504692 9.165 l
h
f
Q
q
5.0300002 12.61 m
5.0300002 12.76 5.0300002 12.91 5.0300002 13.06 c
5.0341001 13.126333 5.0116186 13.191569 4.9675231 13.241294 c
4.9234276 13.291018 4.8613477 13.321139 4.7950001 13.325 c
4.7288465 13.331973 4.6627665 13.311176 4.6125298 13.267574 c
4.5622926 13.223972 4.5324054 13.161476 4.5300002 13.095 c
4.5300002 12.935 4.5300002 12.77 4.5300002 12.595 c
4.5283518 11.957618 4.6158662 11.323137 4.79 10.71 c
4.819253 10.601351 4.9174838 10.525632 5.0300002 10.525 c
5.0999999 10.525 l
5.230731 10.565901 5.3057938 10.702779 5.27 10.835 c
5.1075158 11.412559 5.026731 12.01003 5.0300002 12.61 c
5.0300002 12.61 l
h
W
0 0 24 24 rc
-0.47002286 18.326323 m
10.278915 18.326323 l
10.278915 5.5250001 l
-0.47002286 5.5250001 l
h
f
Q
q
17.74 12.15 m
17.688387 11.407066 17.505562 10.679151 17.200001 10 c
17.143675 9.8743467 17.199562 9.7268028 17.325001 9.6700001 c
17.35796 9.6546841 17.393675 9.6461811 17.43 9.6450005 c
17.528301 9.6453342 17.616884 9.7043896 17.655001 9.7950001 c
17.984432 10.524289 18.180855 11.306591 18.235001 12.105 c
18.244665 12.243072 18.140572 12.362835 18.002501 12.3725 c
17.864429 12.382165 17.744665 12.278071 17.735001 12.14 c
17.74 12.15 l
h
W
0 0 24 24 rc
12.178067 17.373121 m
23.235622 17.373121 l
23.235622 4.645 l
12.178067 4.645 l
h
f
Q
q
14.17 6.8850002 m
14.031929 6.8546243 13.944624 6.718071 13.975 6.5799999 c
14.005376 6.4419289 14.141929 6.3546243 14.28 6.3850002 c
14.316075 6.3756852 14.353925 6.3756852 14.39 6.3850002 c
14.681255 6.5319877 14.961932 6.6990576 15.23 6.8850002 c
15.624426 7.1509175 15.989772 7.4576068 16.32 7.8000002 c
16.403299 7.900948 16.39464 8.0490551 16.300148 8.1396112 c
16.205656 8.2301664 16.057314 8.2325163 15.96 8.1450005 c
15.656992 7.829289 15.321841 7.5460863 14.96 7.3000002 c
14.707214 7.1424556 14.443167 7.0037465 14.17 6.8850002 c
h
W
0 0 24 24 rc
8.9689674 13.209114 m
21.377174 13.209114 l
21.377174 1.3780141 l
8.9689674 1.3780141 l
h
f
Q
q
10.95 19.209999 m
10.943691 19.276438 10.91108 19.337597 10.859428 19.379858 c
10.807777 19.422117 10.741372 19.441973 10.675 19.434999 c
9.8794107 19.351362 9.1044846 19.129713 8.3850002 18.780001 c
8.3252411 18.750917 8.279521 18.699238 8.2579422 18.636377 c
8.2363644 18.573519 8.2407026 18.504654 8.2700005 18.445 c
8.3101034 18.357405 8.3986988 18.302279 8.4949999 18.305 c
8.5329332 18.306179 8.5702829 18.314669 8.6049995 18.33 c
9.2702732 18.655594 9.9880867 18.860441 10.725 18.934999 c
10.791438 18.941309 10.852597 18.973919 10.894857 19.025572 c
10.937119 19.077223 10.956972 19.143627 10.95 19.209999 c
h
W
0 0 24 24 rc
3.2443979 24.436369 m
15.951369 24.436369 l
15.951369 13.304904 l
3.2443979 13.304904 l
h
f
Q
q
6.8099999 17.385 m
6.7630582 17.432327 6.6991596 17.45895 6.6325002 17.45895 c
6.5658407 17.45895 6.5019417 17.432327 6.4549999 17.385 c
5.8987164 16.800764 5.4486341 16.123949 5.125 15.385 c
5.0965309 15.324833 5.0937676 15.255672 5.1173458 15.193426 c
5.140924 15.13118 5.1888137 15.081206 5.25 15.055 c
5.2829113 15.047499 5.3170886 15.047499 5.3499999 15.055 c
5.447844 15.056202 5.536727 15.112237 5.5799999 15.2 c
5.8810167 15.877786 6.2990708 16.49725 6.8150001 17.030001 c
6.8616734 17.077604 6.8873987 17.14188 6.8864598 17.208542 c
6.8855209 17.275204 6.8579955 17.338728 6.8099999 17.385 c
6.8099999 17.385 l
h
W
0 0 24 24 rc
0.10145984 22.45895 m
11.886485 22.45895 l
11.886485 10.049375 l
0.10145984 10.049375 l
h
f
Q
q
6.2399998 8.875 m
6.2009683 8.9288235 6.1421046 8.9648819 6.0764246 8.9752026 c
6.0107446 8.9855242 5.9436588 8.9692574 5.8899999 8.9300003 c
5.7803798 8.8471956 5.7560601 8.6924353 5.835 8.5799999 c
6.3048487 7.9334617 6.8834519 7.3734684 7.5450001 6.9250002 c
7.586235 6.8965774 7.6349268 6.8809266 7.6849999 6.8800001 c
7.7686162 6.880764 7.8467617 6.9216971 7.895 6.9899998 c
7.9708157 7.1062732 7.9397044 7.2618308 7.8249998 7.3400002 c
7.2109427 7.7550106 6.6744738 8.2745562 6.2399998 8.875 c
6.2399998 8.875 l
h
W
0 0 24 24 rc
0.78868252 13.978234 m
12.936422 13.978234 l
12.936422 1.88 l
0.78868252 1.88 l
h
f
Q
q
18.059999 18.09 m
15.972911 20.640722 12.615285 21.780022 9.4068909 21.026144 c
6.1984968 20.272268 3.699616 17.756865 2.9668982 14.543572 c
2.2341802 11.33028 3.3955798 7.9802351 5.96 5.9099998 c
5.96 5.9099998 l
8.0414629 3.3376162 11.409913 2.1809521 14.63258 2.9319947 c
17.855247 3.683037 20.365301 6.2096863 21.095091 9.437232 c
21.824881 12.664779 20.646044 16.025534 18.059999 18.09 c
18.059999 18.09 l
h
3.2599752 12.59 m
3.2519057 15.882564 5.2293363 18.85533 8.2691422 20.120483 c
11.308949 21.385639 14.811625 20.69367 17.141975 18.36762 c
19.472324 16.041571 20.170759 12.540177 18.911221 9.4980402 c
17.651682 6.4559031 14.682572 4.4729862 11.39 4.4749985 c
6.8991165 4.4777603 3.2599752 8.1191158 3.2599752 12.61 c
3.2599752 12.59 l
h
12.61 3.24 m
11.007549 3.2417748 9.4415855 3.7185237 8.1099997 4.6100001 c
11.335564 3.2753618 15.047562 4.0165963 17.513174 6.4876838 c
19.978788 8.9587717 20.711788 12.672404 19.370001 15.895 c
21.037512 13.402413 21.195408 10.193666 19.780672 7.549408 c
18.365936 4.9051495 15.608927 3.2559404 12.61 3.26 c
12.61 3.24 l
h
W
0 0 24 24 rc
-2.2493789 26.255249 m
26.308018 26.255249 l
26.308018 -2.2936661 l
-2.2493789 -2.2936661 l
h
f
Q
0.80000001 0.80000001 0.80000001 sc
q
5.9549999 5.9099998 m
5.9549999 5.9050002 l
5.9549999 5.9099998 l
5.9549999 5.9099998 l
5.9549999 5.9099998 l
h
W
0 0 24 24 rc
0.95499998 10.91 m
10.955 10.91 l
10.955 0.90499997 l
0.95499998 0.90499997 l
h
f
Q
q
20.74008 11.39 m
20.738226 12.992451 20.261477 14.558414 19.370001 15.89 c
19.803045 14.848975 20.02566 13.732502 20.025 12.605 c
20.034775 9.7203121 18.601761 7.0217237 16.206499 5.414166 c
13.811238 3.806608 10.770893 3.5029428 8.1049995 4.605 c
10.601318 2.9349535 13.81561 2.7792425 16.461664 4.2001753 c
19.107719 5.6211081 20.75333 8.3865881 20.74008 11.39 c
h
W
0 0 24 24 rc
3.105 20.889999 m
25.74016 20.889999 l
25.74016 -1.7660534 l
3.105 -1.7660534 l
h
f
Q
0 0 0 sc
q
5.9450002 5.9000001 m
5.9899998 5.8499999 l
5.9813418 5.8700829 5.9695258 5.8886509 5.9549999 5.9050002 c
5.9450002 5.9000001 l
h
W
0 0 24 24 rc
0.94499999 10.905 m
10.99 10.905 l
10.99 0.85000002 l
0.94499999 0.85000002 l
h
f
Q
q
13.17 12.61 m
13.719227 12.95106 13.978751 13.612715 13.807862 14.236229 c
13.636973 14.859742 13.076369 15.296622 12.43 15.31 c
12.43 16.155001 l
12.43 16.279264 12.329264 16.379999 12.205 16.379999 c
12.080736 16.379999 11.98 16.279264 11.98 16.155001 c
11.98 15.315 l
10.855 15.315 l
10.855 16.155001 l
10.855 16.279264 10.754264 16.379999 10.63 16.379999 c
10.505736 16.379999 10.405 16.279264 10.405 16.155001 c
10.405 15.315 l
9.1400003 15.315 l
9.0157356 15.315 8.915 15.214264 8.915 15.09 c
8.915 14.965736 9.0157356 14.865 9.1400003 14.865 c
9.6750002 14.865 l
9.6750002 10.365 l
9.1400003 10.365 l
9.0272751 10.348243 8.943819 10.251464 8.943819 10.1375 c
8.943819 10.023536 9.0272751 9.9267569 9.1400003 9.9099998 c
10.405 9.9099998 l
10.405 9.0699997 l
10.405 8.9457359 10.505736 8.8450003 10.63 8.8450003 c
10.754264 8.8450003 10.855 8.9457359 10.855 9.0699997 c
10.855 9.8999996 l
12 9.8999996 l
12 9.0600004 l
12 8.9357357 12.100736 8.835 12.225 8.835 c
12.349264 8.835 12.45 8.9357357 12.45 9.0600004 c
12.45 9.9049997 l
13.099605 9.914937 13.664491 10.352922 13.835922 10.979577 c
14.007355 11.606231 13.744084 12.270773 13.19 12.61 c
13.17 12.61 l
h
10.205 14.865 m
12.4 14.865 l
12.960569 14.865 13.415 14.410569 13.415 13.85 c
13.415 13.289431 12.960569 12.835 12.4 12.835 c
10.125 12.835 l
10.125 14.865 l
10.205 14.865 l
h
12.4 10.365 m
10.125 10.365 l
10.125 12.385 l
12.4 12.385 l
12.960569 12.385 13.415 11.930569 13.415 11.37 c
13.415 10.809431 12.960569 10.355 12.4 10.355 c
12.4 10.365 l
h
W
0 0 24 24 rc
3.915 21.379999 m
18.887789 21.379999 l
18.887789 3.835 l
3.915 3.835 l
h
f
ep
end
%%Trailer
%%EOF
