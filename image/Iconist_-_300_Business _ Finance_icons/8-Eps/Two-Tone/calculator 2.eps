%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.14.6 (Build 18G2022) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 24 24
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 24 24
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0.80000001 0.80000001 0.80000001 sc
q
7.5300002 12.57 m
9.7087631 12.57 11.475 14.336237 11.475 16.514999 c
11.475 18.693764 9.7087631 20.459999 7.5300002 20.459999 c
5.3512368 20.459999 3.585 18.693764 3.585 16.514999 c
3.585 14.336237 5.3512368 12.57 7.5300002 12.57 c
h
W
0 0 24 24 rc
-1.4150001 25.459999 m
16.475 25.459999 l
16.475 7.5700002 l
-1.4150001 7.5700002 l
h
f
Q
0 0 0 sc
q
7.5300002 12.345 m
5.8420296 12.345 4.3205562 13.36263 3.676008 14.922694 c
3.03146 16.482759 3.3909855 18.277521 4.5867095 19.468943 c
5.782433 20.660366 7.5784793 21.013422 9.1362114 20.363256 c
10.693943 19.713091 11.706072 18.18796 11.700027 16.5 c
11.689003 14.203975 9.8260498 12.347723 7.5300002 12.345 c
h
7.5300002 20.235001 m
5.4781098 20.232225 3.8159394 18.568542 3.8150301 16.516651 c
3.8141217 14.46476 5.4748178 12.799605 7.5267048 12.795003 c
9.5785913 12.790421 11.246724 14.448125 11.255013 16.5 c
11.257657 17.489662 10.866376 18.439703 10.167515 19.14044 c
9.4686537 19.841177 8.5196667 20.235001 7.5300002 20.235001 c
h
W
0 0 24 24 rc
-1.6400967 25.68512 m
16.700054 25.68512 l
16.700054 7.3449998 l
-1.6400967 7.3449998 l
h
f
Q
0.80000001 0.80000001 0.80000001 sc
q
7.5300002 3.46 m
9.7087631 3.46 11.475 5.2262368 11.475 7.4050002 c
11.475 9.5837631 9.7087631 11.35 7.5300002 11.35 c
5.3512368 11.35 3.585 9.5837631 3.585 7.4050002 c
3.585 5.2262368 5.3512368 3.46 7.5300002 3.46 c
h
W
0 0 24 24 rc
-1.4150001 16.35 m
16.475 16.35 l
16.475 -1.5400001 l
-1.4150001 -1.5400001 l
h
f
Q
0 0 0 sc
q
7.5300002 3.2349999 m
5.2269726 3.2349999 3.3599999 5.1019726 3.3599999 7.4050002 c
3.3599999 9.7080278 5.2269726 11.575 7.5300002 11.575 c
9.8330278 11.575 11.7 9.7080278 11.7 7.4050002 c
11.697245 5.1031146 9.8318853 3.2377551 7.5300002 3.2349999 c
7.5300002 3.2349999 l
h
7.5300002 11.13 m
5.4727392 11.13 3.8050001 9.4622602 3.8050001 7.4050002 c
3.8050001 5.3477392 5.4727392 3.6800001 7.5300002 3.6800001 c
9.5872602 3.6800001 11.255 5.3477392 11.255 7.4050002 c
11.255 8.392931 10.862546 9.3403997 10.163973 10.038973 c
9.4653997 10.737546 8.517931 11.13 7.5300002 11.13 c
7.5300002 11.13 l
h
W
0 0 24 24 rc
-1.64 16.575001 m
16.700001 16.575001 l
16.700001 -1.765 l
-1.64 -1.765 l
h
f
Q
0.80000001 0.80000001 0.80000001 sc
q
16.639999 12.57 m
18.818764 12.57 20.584999 14.336237 20.584999 16.514999 c
20.584999 18.693764 18.818764 20.459999 16.639999 20.459999 c
14.461237 20.459999 12.695 18.693764 12.695 16.514999 c
12.695 14.336237 14.461237 12.57 16.639999 12.57 c
h
W
0 0 24 24 rc
7.6950002 25.459999 m
25.584999 25.459999 l
25.584999 7.5700002 l
7.6950002 7.5700002 l
h
f
Q
0 0 0 sc
q
16.639999 12.345 m
14.95203 12.345 13.430556 13.36263 12.786008 14.922694 c
12.14146 16.482759 12.500985 18.277521 13.69671 19.468943 c
14.892433 20.660366 16.688478 21.013422 18.24621 20.363256 c
19.803944 19.713091 20.816072 18.18796 20.810028 16.5 c
20.799002 14.203975 18.93605 12.347723 16.639999 12.345 c
h
16.639999 20.235001 m
14.587457 20.235001 12.922781 18.572521 12.920031 16.519979 c
12.917286 14.467439 14.577505 12.800526 16.630041 12.795 c
18.682575 12.789501 20.351723 14.447474 20.360014 16.5 c
20.362656 17.488796 19.972059 18.438078 19.274281 19.138672 c
18.576502 19.839264 17.628799 20.233677 16.639999 20.235001 c
h
W
0 0 24 24 rc
7.4699035 25.68512 m
25.810055 25.68512 l
25.810055 7.3449998 l
7.4699035 7.3449998 l
h
f
Q
0.80000001 0.80000001 0.80000001 sc
q
16.639999 3.46 m
18.818764 3.46 20.584999 5.2262368 20.584999 7.4050002 c
20.584999 9.5837631 18.818764 11.35 16.639999 11.35 c
14.461237 11.35 12.695 9.5837631 12.695 7.4050002 c
12.695 5.2262368 14.461237 3.46 16.639999 3.46 c
h
W
0 0 24 24 rc
7.6950002 16.35 m
25.584999 16.35 l
25.584999 -1.5400001 l
7.6950002 -1.5400001 l
h
f
Q
0 0 0 sc
q
16.639999 3.2349999 m
14.336972 3.2349999 12.47 5.1019726 12.47 7.4050002 c
12.47 9.7080278 14.336972 11.575 16.639999 11.575 c
18.943027 11.575 20.809999 9.7080278 20.809999 7.4050002 c
20.807245 5.1031146 18.941885 3.2377551 16.639999 3.2349999 c
16.639999 3.2349999 l
h
16.639999 11.130003 m
15.132925 11.132023 13.773121 10.225739 13.194986 8.8339634 c
12.616851 7.4421878 12.934311 5.8391795 13.999259 4.7728 c
15.064207 3.7064207 16.666788 3.3868079 18.059338 3.963073 c
19.451889 4.5393381 20.360001 5.8979235 20.360001 7.4050002 c
20.357254 9.4591713 18.694166 11.124495 16.639999 11.130003 c
16.639999 11.130003 l
h
W
0 0 24 24 rc
7.4699998 16.575001 m
25.809999 16.575001 l
25.809999 -1.765 l
7.4699998 -1.765 l
h
f
Q
q
9.5299997 16.290001 m
5.5300002 16.290001 l
5.405736 16.290001 5.3049998 16.390736 5.3049998 16.514999 c
5.3049998 16.639263 5.405736 16.74 5.5300002 16.74 c
9.5299997 16.74 l
9.6542645 16.74 9.7550001 16.639263 9.7550001 16.514999 c
9.7550001 16.390736 9.6542645 16.290001 9.5299997 16.290001 c
9.5299997 16.290001 l
h
W
0 0 24 24 rc
0.30499998 21.74 m
14.755 21.74 l
14.755 11.29 l
0.30499998 11.29 l
h
f
Q
q
9.5299997 16.290001 m
5.5300002 16.290001 l
5.405736 16.290001 5.3049998 16.390736 5.3049998 16.514999 c
5.3049998 16.639263 5.405736 16.74 5.5300002 16.74 c
9.5299997 16.74 l
9.6542645 16.74 9.7550001 16.639263 9.7550001 16.514999 c
9.7550001 16.390736 9.6542645 16.290001 9.5299997 16.290001 c
9.5299997 16.290001 l
h
W
0 0 24 24 rc
0.30499998 21.74 m
14.755 21.74 l
14.755 11.29 l
0.30499998 11.29 l
h
f
Q
q
7.5300002 14.289999 m
7.405736 14.289999 7.3049998 14.390736 7.3049998 14.515 c
7.3049998 18.5 l
7.3049998 18.624264 7.405736 18.725 7.5300002 18.725 c
7.654264 18.725 7.7550001 18.624264 7.7550001 18.5 c
7.7550001 14.5 l
7.7470913 14.381629 7.6486344 14.289736 7.5300002 14.289999 c
h
W
0 0 24 24 rc
2.3050001 23.725 m
12.755 23.725 l
12.755 9.289999 l
2.3050001 9.289999 l
h
f
Q
q
6.1149998 5.7699776 m
6.0565376 5.7691441 6.0003648 5.7927003 5.96 5.835 c
5.9175444 5.8764052 5.8936024 5.9331965 5.8936024 5.9924998 c
5.8936024 6.0518031 5.9175444 6.1085949 5.96 6.1500001 c
8.7849998 9 l
8.8733654 9.0883656 9.016634 9.0883656 9.1049995 9 c
9.1933651 8.9116344 9.1933651 8.7683659 9.1049995 8.6800003 c
6.2750001 5.855 l
6.2363501 5.8050017 6.1780663 5.7740383 6.1149998 5.7699776 c
6.1149998 5.7699776 l
h
W
0 0 24 24 rc
0.89360255 14.066274 m
14.171274 14.066274 l
14.171274 0.76995605 l
0.89360255 0.76995605 l
h
f
Q
q
6.1149998 5.7699776 m
6.0565376 5.7691441 6.0003648 5.7927003 5.96 5.835 c
5.9175444 5.8764052 5.8936024 5.9331965 5.8936024 5.9924998 c
5.8936024 6.0518031 5.9175444 6.1085949 5.96 6.1500001 c
8.7849998 9 l
8.8733654 9.0883656 9.016634 9.0883656 9.1049995 9 c
9.1933651 8.9116344 9.1933651 8.7683659 9.1049995 8.6800003 c
6.2750001 5.855 l
6.2363501 5.8050017 6.1780663 5.7740383 6.1149998 5.7699776 c
6.1149998 5.7699776 l
h
W
0 0 24 24 rc
0.89360255 14.066274 m
14.171274 14.066274 l
14.171274 0.76995605 l
0.89360255 0.76995605 l
h
f
Q
q
8.9449997 5.7699928 m
8.8851433 5.7695212 8.8275642 5.792913 8.7849998 5.835 c
5.96 8.6599998 l
5.9172502 8.7022667 5.8931928 8.7598829 5.8931928 8.8199997 c
5.8931928 8.8801165 5.9172502 8.9377337 5.96 8.9799995 c
6.0474896 9.0657568 6.18751 9.0657568 6.2750001 8.9799995 c
9.1049995 6.1500001 l
9.1666021 6.0851974 9.1839886 5.9900694 9.1492929 5.9076662 c
9.1145964 5.8252625 9.0344019 5.7712221 8.9449997 5.7699928 c
8.9449997 5.7699928 l
h
W
0 0 24 24 rc
0.89319289 14.044318 m
14.16693 14.044318 l
14.16693 0.7699858 l
0.89319289 0.7699858 l
h
f
Q
q
18.639999 16.290001 m
14.64 16.290001 l
14.515736 16.290001 14.415 16.390736 14.415 16.514999 c
14.415 16.639263 14.515736 16.74 14.64 16.74 c
18.639999 16.74 l
18.764263 16.74 18.865 16.639263 18.865 16.514999 c
18.865 16.390736 18.764263 16.290001 18.639999 16.290001 c
18.639999 16.290001 l
h
W
0 0 24 24 rc
9.415 21.74 m
23.865 21.74 l
23.865 11.29 l
9.415 11.29 l
h
f
Q
q
18.639999 16.290001 m
14.64 16.290001 l
14.515736 16.290001 14.415 16.390736 14.415 16.514999 c
14.415 16.639263 14.515736 16.74 14.64 16.74 c
18.639999 16.74 l
18.764263 16.74 18.865 16.639263 18.865 16.514999 c
18.865 16.390736 18.764263 16.290001 18.639999 16.290001 c
18.639999 16.290001 l
h
W
0 0 24 24 rc
9.415 21.74 m
23.865 21.74 l
23.865 11.29 l
9.415 11.29 l
h
f
Q
q
18.639999 7.1849999 m
14.64 7.1849999 l
14.552547 7.1718535 14.465502 7.2111568 14.417531 7.2854514 c
14.369559 7.3597465 14.369559 7.4552536 14.417531 7.5295482 c
14.465502 7.6038432 14.552547 7.6431465 14.64 7.6300001 c
18.639999 7.6300001 l
18.727453 7.6431465 18.814499 7.6038432 18.862469 7.5295482 c
18.91044 7.4552536 18.91044 7.3597465 18.862469 7.2854514 c
18.814499 7.2111568 18.727453 7.1718535 18.639999 7.1849999 c
18.639999 7.1849999 l
h
W
0 0 24 24 rc
9.3815527 12.632507 m
23.898447 12.632507 l
23.898447 2.182493 l
9.3815527 2.182493 l
h
f
Q
q
18.639999 7.1849999 m
14.64 7.1849999 l
14.552547 7.1718535 14.465502 7.2111568 14.417531 7.2854514 c
14.369559 7.3597465 14.369559 7.4552536 14.417531 7.5295482 c
14.465502 7.6038432 14.552547 7.6431465 14.64 7.6300001 c
18.639999 7.6300001 l
18.727453 7.6431465 18.814499 7.6038432 18.862469 7.5295482 c
18.91044 7.4552536 18.91044 7.3597465 18.862469 7.2854514 c
18.814499 7.2111568 18.727453 7.1718535 18.639999 7.1849999 c
18.639999 7.1849999 l
h
W
0 0 24 24 rc
9.3815527 12.632507 m
23.898447 12.632507 l
23.898447 2.182493 l
9.3815527 2.182493 l
h
f
Q
q
16.639999 8.1850004 m
16.165035 8.1850004 15.78 8.570035 15.78 9.0450001 c
15.78 9.5199652 16.165035 9.9049997 16.639999 9.9049997 c
17.114965 9.9049997 17.5 9.5199652 17.5 9.0450001 c
17.5 8.8169136 17.409393 8.5981693 17.248112 8.4368877 c
17.08683 8.2756071 16.868086 8.1850004 16.639999 8.1850004 c
h
16.639999 9.4549999 m
16.471254 9.4570208 16.31809 9.356658 16.252577 9.2011366 c
16.187065 9.0456152 16.222252 8.8659096 16.341581 8.7465801 c
16.460909 8.6272516 16.640615 8.5920649 16.796137 8.6575775 c
16.951658 8.7230902 17.052021 8.876255 17.049999 9.0450001 c
17.047302 9.2703094 16.865309 9.452301 16.639999 9.4549999 c
16.639999 9.4549999 l
h
W
0 0 24 24 rc
10.78 14.905 m
22.5 14.905 l
22.5 3.1849999 l
10.78 3.1849999 l
h
f
Q
q
16.639999 4.9099998 m
16.165035 4.9099998 15.78 5.2950349 15.78 5.77 c
15.78 6.2449651 16.165035 6.6300001 16.639999 6.6300001 c
17.114965 6.6300001 17.5 6.2449651 17.5 5.77 c
17.5 5.541914 17.409393 5.3231692 17.248112 5.1618881 c
17.08683 5.000607 16.868086 4.9099998 16.639999 4.9099998 c
h
16.639999 6.1849999 m
16.471708 6.1870279 16.318855 6.0872121 16.253044 5.9323087 c
16.187231 5.7774053 16.221493 5.5980926 16.339777 5.4783645 c
16.458063 5.3586364 16.636948 5.3222046 16.792637 5.3861351 c
16.948326 5.4500651 17.049988 5.6016955 17.049999 5.77 c
17.050016 5.9972596 16.867243 6.1822619 16.639999 6.1849999 c
16.639999 6.1849999 l
h
W
0 0 24 24 rc
10.78 11.63 m
22.5 11.63 l
22.5 -0.090000026 l
10.78 -0.090000026 l
h
f
ep
end
%%Trailer
%%EOF
